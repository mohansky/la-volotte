---
// components/Product/ProductCardImage.astro
import { Image } from "astro:assets";
import LVLogo from "../Icons/LVLogo.astro";

interface Props {
  subDirectory?: string;
  width?: number;
  height?: number;
}

interface ImageFile {
  filename: string;
  url: string;
  size: number;
  lastModified: string;
  colorInfo: string;
}

interface ImageManifest {
  generated: string;
  products: Record<string, ImageFile[]>;
  features: Record<string, ImageFile[]>;
}

const { subDirectory = "", width = 600, height = 600 } = Astro.props;

console.log("üîç ProductCardImage Debug:");
console.log("  subDirectory prop:", JSON.stringify(subDirectory));

function getProductName(csvPath: string): string {
  if (!csvPath) return "Image";
  const pathParts = csvPath.split("/");
  return pathParts[pathParts.length - 2] || "Image";
}

const imageName = getProductName(subDirectory);

// Load manifest server-side
let primaryImageUrl = "";
let hasImage = false;

if (subDirectory) {
  try {
    const manifestResponse = await fetch(`${Astro.url.origin}/image-manifest.json`);
    
    if (!manifestResponse.ok) {
      throw new Error(`Manifest not found (${manifestResponse.status})`);
    }
    
    const manifestData: ImageManifest = await manifestResponse.json();
    
    if (manifestData?.features) {
      // Clean the path - remove leading slash (same as ImageFeatureSlider)
      const cleanPath = subDirectory.startsWith("/") ? subDirectory.slice(1) : subDirectory;
      
      // Look for exact match in features (same as ImageFeatureSlider)
      let featureImages: ImageFile[] = manifestData.features[cleanPath] || [];
      
      // Try partial matches if no exact match (same as ImageFeatureSlider)
      if (featureImages.length === 0) {
        const availableFeatures = Object.keys(manifestData.features);
        
        const partialMatch = availableFeatures.find(
          (cat: string) => cat.includes(cleanPath) || cleanPath.includes(cat)
        );
        
        if (partialMatch) {
          featureImages = manifestData.features[partialMatch] || [];
        }
      }
      
      // Get primary image URL (same sorting logic as ImageFeatureSlider)
      if (featureImages.length > 0) {
        const sortedImages = featureImages.sort((a: ImageFile, b: ImageFile) => {
          const aPriority = a.filename.includes("-1.") ? 1 : 2;
          const bPriority = b.filename.includes("-1.") ? 1 : 2;
          if (aPriority !== bPriority) return aPriority - bPriority;
          return a.filename.localeCompare(b.filename);
        });
        
        primaryImageUrl = sortedImages[0].url;
        hasImage = true;
      }
    }
  } catch (error) {
    console.error("Error loading manifest server-side:", error);
  }
} else {
  console.log("  ‚ùå No subDirectory provided");
}

console.log("üèÅ Final result - hasImage:", hasImage, "primaryImageUrl:", primaryImageUrl ? primaryImageUrl.substring(0, 50) + "..." : "none");
---

<figure class="relative">
  {hasImage ? (
    <img
      src={primaryImageUrl}
      alt={imageName}
      width={width}
      height={height}
      class="object-contain bg-white border border-primary rounded-lg"
      loading="lazy"
    />
  ) : (
    <div class="bg-white border border-primary rounded-lg flex items-center justify-center p-4">
      <div class="text-center">
        <LVLogo />
        <div class="text-xs mt-2 text-gray-500 max-w-32 overflow-hidden">
          Path: {subDirectory || "none"}
        </div>
        <div class="text-xs text-red-500">
          No image found
        </div>
      </div>
    </div>
  )}
</figure>

<style>
  figure {
    margin: 0;
  }
</style>