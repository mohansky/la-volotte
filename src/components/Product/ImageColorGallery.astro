---
// components/Product/ImageColorGallery.astro
import IconTiArrowLeft from '../Icons/IconTiArrowLeft.astro';
import IconTiArrowRight from '../Icons/IconTiArrowRight.astro';
import IconTiClose from '../Icons/IconTiClose.astro';
import Heading from '../ui/Heading.astro';

interface Props {
  subDirectory?: string;
}

const { subDirectory = "" } = Astro.props;

const uniqueId = Math.random().toString(36).substring(2, 9);
---

<!-- Thumbnail Gallery -->
<div
  id={`color-gallery-${uniqueId}`}
  class="color-gallery grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 place-items-center gap-4 p-4"
>
  <!-- Initial loading state -->
  <div class="col-span-full text-center p-8 loading-state">
    <div class="text-4xl mb-4">🔄</div>
    <p class="text-base-content/50 mb-2">Loading color variants...</p>
    <p class="text-sm text-base-content/40">Reading from manifest</p>
  </div>
</div>

<!-- Modal -->
<input type="checkbox" id={`image-modal-${uniqueId}`} class="modal-toggle" />
<div class="modal">
  <div class="modal-box max-w-7xl relative p-0 bg-base-100">
    <label
      for={`image-modal-${uniqueId}`}
      class="btn btn-sm btn-circle absolute right-2 top-2 z-10 bg-opacity-50"
    >
      <IconTiClose class="w-3 h-3" />
    </label>

    <!-- Carousel Container -->
    <div
      id={`carousel-${uniqueId}`}
      class="color-carousel carousel w-full snap-x relative transition-all duration-500"
    >
      <!-- Modal slides will be inserted here dynamically -->
    </div>
  </div>
  <label class="modal-backdrop" for={`image-modal-${uniqueId}`}>Close</label>
</div>

<!-- Hidden Template for Modal Slides -->
<template id={`slide-template-${uniqueId}`}>
  <div
    class="carousel-item color-modal-slide relative w-full flex-shrink-0 snap-center flex justify-center items-center min-h-[98vh] transition-opacity duration-500 modal-slide"
    style="display: none;"
  >
    <div class="color-modal-image-container">
      <img
        class="color-slide-image  max-h-[60vh] object-contain my-3 p-5"
        width="1200"
        height="800"
        loading="lazy"
      />
    </div>

    <div
      class="absolute flex justify-between transform -translate-y-1/2 left-5 right-5 top-1/2 z-10"
    >
      <button
        class="btn btn-circle bg-opacity-50 transition-all hover:bg-opacity-80 color-prev-btn"
      >
        <IconTiArrowLeft class="fill-primary w-5 h-5" />
      </button>
      <button
        class="btn btn-circle bg-opacity-50 transition-all hover:bg-opacity-80 color-next-btn"
      >
        <IconTiArrowRight class="fill-primary w-5 h-5" />
      </button>
    </div>

    <div class="absolute bottom-0 left-0 right-0 p-1 bg-base-100/20 mt-3">
      <Heading
        size="lg"
        fontweight="bold"
        class="text-center capitalize color-slide-title"
      >
        Color Name
      </Heading>
      <Heading
        size="xs"
        fontweight="normal"
        class="text-center color-slide-counter"
      >
        Color <span class="color-current-number">1</span> von <span
          class="color-total-colors">?</span
        >
      </Heading>
    </div>
  </div>
</template>

<!-- Hidden Template for Thumbnails -->
<template id={`thumbnail-template-${uniqueId}`}>
  <div class="color-thumbnail-container color-image" style="display: none;">
    <label
      for={`image-modal-${uniqueId}`}
      class="cursor-pointer hover:opacity-90 transition-opacity color-thumbnail-label"
    >
      <div class="color-image-wrapper">
        <img
          class="color-thumbnail-image rounded-lg shadow-sm object-contain w-full aspect-square"
          width="200"
          height="150"
          loading="lazy"
        />
      </div>
      <p class="mt-2 text-center truncate capitalize color-label">Color Name</p>
    </label>
  </div>
</template>

<style>
  .color-carousel {
    scroll-snap-type: x mandatory;
    scrollbar-width: none;
    scroll-behavior: smooth;
  }

  .color-carousel::-webkit-scrollbar {
    display: none;
  }

  .color-carousel .carousel-item {
    scroll-snap-align: center;
  }

  .color-thumbnail-container {
    transition: transform 0.2s;
  }
  .color-thumbnail-container:hover {
    transform: scale(1.01);
  }

  .color-carousel .carousel-item {
    transition: opacity 0.4s ease-in-out;
  }

  .color-gallery .loading-state {
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%,
    100% {
      opacity: 1;
    }
    50% {
      opacity: 0.7;
    }
  }
</style>

<script define:vars={{ uniqueId, subDirectory }}>
  let loadedImages = [];
  let modalSlides = [];
  let manifest = null;

  document.addEventListener("DOMContentLoaded", () => {
    initializeColorGallery();
  });

  document.addEventListener("astro:page-load", () => {
    initializeColorGallery();
  });

  async function initializeColorGallery() {
    if (typeof window === "undefined") {
      return;
    }

    const gallery = document.getElementById(`color-gallery-${uniqueId}`);
    if (!gallery) {
      console.error("Gallery container not found");
      return;
    }

    if (!subDirectory) {
      console.error("No subDirectory provided");
      showErrorMessage("No directory specified");
      return;
    }

    try {
      // Load manifest (cached by browser after first load)
      const colorImages = await loadImagesFromManifest(subDirectory);

      if (colorImages.length === 0) {
        showNoImagesMessage();
        return;
      }

      // Clear loading state
      gallery.innerHTML = "";

      // Create gallery and modal content using templates
      await createGalleryFromTemplates(colorImages);

      // Test only a few images to verify they're accessible
      await quickTestImages(colorImages);
    } catch (error) {
      console.error("Error initializing gallery:", error);
      showErrorMessage(`Failed to load images: ${error.message}`);
    }
  }

  async function loadImagesFromManifest(subDirectory) {
    if (!manifest) {
      try {
        const response = await fetch("/image-manifest.json");

        if (!response.ok) {
          throw new Error(`Manifest not found (${response.status})`);
        }

        manifest = await response.json();
      } catch (error) {
        console.error("Failed to load manifest:", error);
        throw new Error(`Manifest loading failed: ${error.message}`);
      }
    }

    // Clean the path and extract the main category
    const cleanPath = subDirectory.startsWith("/")
      ? subDirectory.slice(1)
      : subDirectory;
    const pathParts = cleanPath.split("/");
    const mainCategory = pathParts[0];
    const subPath = pathParts.slice(1).join("/");

    // Get all images from the main category
    const categoryImages = manifest.products[mainCategory] || [];

    // Filter images that match the sub-path if specified
    let filteredImages = categoryImages;
    if (subPath) {
      filteredImages = categoryImages.filter((img) => {
        const imgPath = img.url.split("/products/")[1];
        const imgSubPath = imgPath.split("/").slice(1).join("/");
        const imgDirPath = imgSubPath.substring(0, imgSubPath.lastIndexOf("/"));
        return imgDirPath.includes(subPath) || imgDirPath === subPath;
      });
    }

    // Transform manifest data to component format
    return filteredImages.map((file, index) => ({
      id: `color-${index}`,
      url: file.url,
      name: file.filename.replace(/\.[^/.]+$/, ""),
      index: index + 1,
      extension: file.filename.split(".").pop(),
      colorInfo: file.colorInfo,
      filename: file.filename,
      size: file.size,
    }));
  }

  async function createGalleryFromTemplates(colorImages) {
    const gallery = document.getElementById(`color-gallery-${uniqueId}`);
    const carousel = document.getElementById(`carousel-${uniqueId}`);
    const thumbnailTemplate = document.getElementById(
      `thumbnail-template-${uniqueId}`
    );
    const slideTemplate = document.getElementById(`slide-template-${uniqueId}`);

    if (!thumbnailTemplate || !slideTemplate) {
      console.error("Templates not found");
      return;
    }

    // Create gallery thumbnails from template
    colorImages.forEach((img, index) => {
      // Clone thumbnail template
      const thumbnailClone = thumbnailTemplate.content.cloneNode(true);
      const thumbnailDiv = thumbnailClone.querySelector(
        ".color-thumbnail-container"
      );
      const thumbnailImg = thumbnailClone.querySelector(
        ".color-thumbnail-image"
      );
      const colorLabel = thumbnailClone.querySelector(".color-label");
      const thumbnailLabel = thumbnailClone.querySelector(
        ".color-thumbnail-label"
      );

      // Set thumbnail data
      thumbnailDiv.dataset.colorIndex = img.index;
      thumbnailDiv.dataset.colorUrl = img.url;
      thumbnailDiv.dataset.colorExtension = img.extension;
      thumbnailDiv.dataset.colorInfo = img.colorInfo;

      // Set thumbnail image attributes
      thumbnailImg.src = img.url;
      thumbnailImg.alt = `Color variant ${img.colorInfo}`;
      thumbnailImg.title = img.colorInfo;

      // Set color label
      colorLabel.textContent = img.colorInfo;

      // Add click handler
      thumbnailLabel.addEventListener("click", () => {
        scrollToSlide(uniqueId, index);
      });

      // Show thumbnail immediately (since we trust the manifest)
      thumbnailDiv.style.display = "block";
      gallery.appendChild(thumbnailClone);

      // Clone modal slide template
      const slideClone = slideTemplate.content.cloneNode(true);
      const modalSlide = slideClone.querySelector(".color-modal-slide");
      const slideImg = slideClone.querySelector(".color-slide-image");
      const slideTitle = slideClone.querySelector(".color-slide-title");
      const currentNumber = slideClone.querySelector(".color-current-number");
      const prevBtn = slideClone.querySelector(".color-prev-btn");
      const nextBtn = slideClone.querySelector(".color-next-btn");

      // Set slide data
      modalSlide.id = `slide-${uniqueId}-${index}`;
      modalSlide.dataset.colorModalIndex = index;
      modalSlide.dataset.colorModalUrl = img.url;
      modalSlide.dataset.colorModalExtension = img.extension;
      modalSlide.dataset.colorModalColor = img.colorInfo;

      // Set slide image attributes
      slideImg.src = img.url;
      slideImg.alt = img.colorInfo;
      slideImg.title = img.colorInfo;

      // Set slide content
      slideTitle.textContent = img.colorInfo;
      currentNumber.textContent = img.index;

      // Add navigation handlers
      prevBtn.addEventListener("click", (e) => {
        e.preventDefault();
        const prevIndex = index === 0 ? colorImages.length - 1 : index - 1;
        scrollToSlide(uniqueId, prevIndex);
      });

      nextBtn.addEventListener("click", (e) => {
        e.preventDefault();
        const nextIndex = index === colorImages.length - 1 ? 0 : index + 1;
        scrollToSlide(uniqueId, nextIndex);
      });

      // Show slide immediately
      modalSlide.style.display = "flex";
      modalSlides.push(modalSlide);
      carousel.appendChild(slideClone);
    });

    // Store loaded images
    loadedImages = colorImages;
  }

  async function quickTestImages(colorImages) {
    // Test only first 3 images to verify accessibility
    const testCount = Math.min(3, colorImages.length);
    let successCount = 0;

    for (let i = 0; i < testCount; i++) {
      try {
        const exists = await testImageExists(colorImages[i].url);
        if (exists) {
          successCount++;
        }
      } catch (error) {
        console.warn(`Quick test failed for image ${i + 1}:`, error.message);
      }
    }

    if (successCount === 0) {
      showErrorMessage("Images appear to be inaccessible");
    } else {
      finalizeGallery();
    }
  }

  function testImageExists(url) {
    return new Promise((resolve) => {
      const img = new Image();

      const timeout = setTimeout(() => {
        resolve(false);
      }, 3000);

      img.onload = () => {
        clearTimeout(timeout);
        resolve(true);
      };

      img.onerror = () => {
        clearTimeout(timeout);
        resolve(false);
      };

      img.src = url;
    });
  }

  function finalizeGallery() {
    // Update total count in modal
    document.querySelectorAll(".color-total-colors").forEach((el) => {
      el.textContent = loadedImages.length;
    });
  }

  function showNoImagesMessage() {
    const gallery = document.getElementById(`color-gallery-${uniqueId}`);
    if (gallery) {
      gallery.innerHTML = `
        <div class="col-span-full text-center p-8">
          <div class="text-4xl mb-4">🎨</div>
          <p class="text-gray-500 mb-2">No color variants available</p>
          <p class="text-sm text-gray-400">Category: ${subDirectory}</p>
          <p class="text-xs text-gray-300 mt-2">Check if manifest contains this category</p>
        </div>
      `;
    }
  }

  function showErrorMessage(message) {
    const gallery = document.getElementById(`color-gallery-${uniqueId}`);
    if (gallery) {
      gallery.innerHTML = `
        <div class="col-span-full text-center p-8">
          <div class="text-4xl mb-4">❌</div>
          <p class="text-red-500 mb-2">Error loading images</p>
          <p class="text-sm text-gray-400">${message}</p>
          <p class="text-xs text-gray-300 mt-2">Check browser console for details</p>
        </div>
      `;
    }
  }

  // Global function for thumbnail clicks
  window.scrollToSlide = function (galleryId, slideIndex) {
    const carousel = document.getElementById(`carousel-${galleryId}`);
    const targetSlide = document.getElementById(
      `slide-${galleryId}-${slideIndex}`
    );

    if (carousel && targetSlide) {
      carousel.scrollTo({
        left: targetSlide.offsetLeft,
        behavior: "smooth",
      });
    }
  };
</script>