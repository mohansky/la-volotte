---
// components/Product/AddtoCartBtn.astro
import Button from "../ui/Button.astro";
import { findFeatureImages, getPrimaryImageUrl, imageManifest } from "../../data/imageManifest";

interface Product {
  id?: number | string;
  preis?: number | string;
  slug?: string;
  beschreibung?: string;
  featureImage?: string;
  name?: string;
  farbenFotos?: string;
}

interface Props {
  product: Product;
  variant?: "primary" | "gradient" | "outline" | "default" | "circle";
  size?: "sm" | "md" | "lg" | "icon";
  class?: string;
  className?: string;
  fullWidth?: boolean;
}

const {
  product,
  variant = "gradient",
  size,
  class: customClass,
  className,
  fullWidth = true,
} = Astro.props;

const { id, preis, slug, beschreibung, name, farbenFotos } = product;

let farbenOptions: string[] = [];
let featureImage = product.featureImage;

if (farbenFotos) {
  try {
    // First, try to get the feature image from the manifest
    const featureImages = findFeatureImages(farbenFotos);
    
    if (featureImages.length > 0) {
      // Get the primary feature image
      featureImage = getPrimaryImageUrl(featureImages);
      console.log(`‚úÖ Found feature image for ${farbenFotos}: ${featureImage}`);
    }
    
    // Now get color variant images from the products section of the manifest
    // The farbenFotos typically corresponds to a product category
    let colorImages = imageManifest.products[farbenFotos] || [];
    
    // If no direct match, try partial matching
    if (colorImages.length === 0) {
      const availableProducts = Object.keys(imageManifest.products);
      const partialMatch = availableProducts.find(
        (category) => category.includes(farbenFotos) || farbenFotos.includes(category)
      );
      
      if (partialMatch) {
        colorImages = imageManifest.products[partialMatch] || [];
        console.log(`üîç Found partial match for colors: ${partialMatch}`);
      }
    }
    
    if (colorImages.length > 0) {
      // Extract color options from image filenames
      farbenOptions = colorImages.map(img => {
        // Extract color info from the colorInfo field or filename
        if (img.colorInfo && img.colorInfo !== img.filename.replace(/\.[^/.]+$/, "")) {
          return img.colorInfo;
        }
        
        // Fallback to extracting from filename
        const nameWithoutExt = img.filename.replace(/\.[^/.]+$/, "");
        
        // Pattern for "albmerino 7353M Beige-Meliert" type filenames
        const colorMatch = nameWithoutExt.match(/(\w+)\s+(\d+[A-Z]?)\s+(.+)$/);
        if (colorMatch) {
          const [, , colorCode, colorName] = colorMatch;
          return `${colorCode} ${colorName.replace(/-/g, ' ')}`;
        }
        
        // Pattern for "Echt_8073_01_1" type filenames
        const structuredMatch = nameWithoutExt.match(/(\w+)_(\d+)_(\d+)_(\d+)/);
        if (structuredMatch) {
          const [, productName, colorCode, colorNum] = structuredMatch;
          return `${colorCode}-${colorNum}`;
        }
        
        // Fallback to cleaned filename
        return nameWithoutExt.replace(/[-_]/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
      });
      
      // Remove duplicates and sort
      farbenOptions = [...new Set(farbenOptions)].sort();
      
      console.log(`üé® Found ${farbenOptions.length} color options for ${farbenFotos}:`, farbenOptions.slice(0, 5));
    } else {
      console.log(`‚ö†Ô∏è No color images found for ${farbenFotos}`);
    }
  } catch (error) {
    console.error(`‚ùå Error processing images for ${farbenFotos}:`, error);
  }
}

const farbenFotosOptions = farbenOptions.join(" | ");

// Build className string
const baseClasses = "snipcart-add-item";
const widthClasses = fullWidth ? "w-full md:w-auto" : "";
const customClasses = customClass || className || "";
const finalClassName = [baseClasses, widthClasses, customClasses]
  .filter(Boolean)
  .join(" ");

console.log(`üõí Cart button for ${name}:`);
console.log(`   Feature Image: ${featureImage ? featureImage.substring(0, 50) + '...' : 'none'}`);
console.log(`   Color Options: ${farbenFotosOptions || 'none'}`);
---

<Button
  variant={variant}
  size={size}
  className={finalClassName}
  title={`${name} zum Warenkorb hinzuf√ºgen`}
  data-item-id={id}
  data-item-price={preis}
  data-item-url={slug}
  data-item-description={beschreibung}
  data-item-image={featureImage}
  data-item-name={name}
  data-item-custom1-name="Farbe"
  data-item-custom1-options={farbenFotosOptions}
>
  in den Warenkorb
</Button>